diff -Naur linux/block/blk.h linux_new/block/blk.h
--- linux/block/blk.h	2020-11-12 11:26:09.740725397 +0530
+++ linux_new/block/blk.h	2020-11-12 13:53:56.186320963 +0530
@@ -13,6 +13,16 @@
 
 #ifdef CONFIG_DEBUG_FS
 extern struct dentry *blk_debugfs_root;
+void blk_q_debugfs_register(struct request_queue *q);
+void blk_q_debugfs_unregister(struct request_queue *q);
+#else
+static inline void blk_q_debugfs_register(struct request_queue *q)
+{
+}
+
+static inline void blk_q_debugfs_unregister(struct request_queue *q)
+{
+}
 #endif
 
 struct blk_flush_queue {
diff -Naur linux/block/blk-mq-debugfs.c linux_new/block/blk-mq-debugfs.c
--- linux/block/blk-mq-debugfs.c	2020-11-12 11:26:09.744725428 +0530
+++ linux_new/block/blk-mq-debugfs.c	2020-11-12 13:11:19.815432869 +0530
@@ -823,8 +823,8 @@
 	struct blk_mq_hw_ctx *hctx;
 	int i;
 
-	q->debugfs_dir = debugfs_create_dir(kobject_name(q->kobj.parent),
-					    blk_debugfs_root);
+	//q->debugfs_dir = debugfs_create_dir(kobject_name(q->kobj.parent),
+	//				    blk_debugfs_root);
 
 	debugfs_create_files(q->debugfs_dir, q, blk_mq_debugfs_queue_attrs);
 
@@ -856,9 +856,9 @@
 
 void blk_mq_debugfs_unregister(struct request_queue *q)
 {
-	debugfs_remove_recursive(q->debugfs_dir);
+	//debugfs_remove_recursive(q->debugfs_dir);
 	q->sched_debugfs_dir = NULL;
-	q->debugfs_dir = NULL;
+	//q->debugfs_dir = NULL;
 }
 
 static void blk_mq_debugfs_register_ctx(struct blk_mq_hw_ctx *hctx,
diff -Naur linux/block/blk-sysfs.c linux_new/block/blk-sysfs.c
--- linux/block/blk-sysfs.c	2020-11-12 11:26:09.744725428 +0530
+++ linux_new/block/blk-sysfs.c	2020-11-12 16:32:02.984233925 +0530
@@ -57,6 +57,7 @@
 	return 0;
 }
 
+
 static ssize_t queue_requests_show(struct request_queue *q, char *page)
 {
 	return queue_var_show(q->nr_requests, (page));
diff -Naur linux/include/linux/blktrace_api.h linux_new/include/linux/blktrace_api.h
--- linux/include/linux/blktrace_api.h	2020-11-12 11:26:09.780725707 +0530
+++ linux_new/include/linux/blktrace_api.h	2020-11-12 14:40:37.273842860 +0530
@@ -22,7 +22,7 @@
 	u64 end_lba;
 	u32 pid;
 	u32 dev;
-	struct dentry *dir;
+//	struct dentry *dir;
 	struct dentry *dropped_file;
 	struct dentry *msg_file;
 	struct list_head running_list;
diff -Naur linux/kernel/trace/blktrace.c linux_new/kernel/trace/blktrace.c
--- linux/kernel/trace/blktrace.c	2020-11-12 11:26:13.192752202 +0530
+++ linux_new/kernel/trace/blktrace.c	2020-11-12 14:01:38.707805448 +0530
@@ -312,7 +312,7 @@
 	debugfs_remove(bt->msg_file);
 	debugfs_remove(bt->dropped_file);
 	relay_close(bt->rchan);
-	debugfs_remove(bt->dir);
+	//debugfs_remove(bt->dir);
 	free_percpu(bt->sequence);
 	free_percpu(bt->msg_data);
 	kfree(bt);
@@ -477,7 +477,7 @@
 			      struct blk_user_trace_setup *buts)
 {
 	struct blk_trace *bt = NULL;
-	struct dentry *dir = NULL;
+	//struct dentry *dir = NULL;
 	int ret;
 
 	if (!buts->buf_size || !buts->buf_nr)
@@ -486,6 +486,9 @@
 	if (!blk_debugfs_root)
 		return -ENOENT;
 
+	if (!q->debugfs_dir)
+		return -ENOENT;
+
 	strncpy(buts->name, name, BLKTRACE_BDEV_SIZE);
 	buts->name[BLKTRACE_BDEV_SIZE - 1] = '\0';
 
@@ -510,21 +513,21 @@
 
 	ret = -ENOENT;
 
-	dir = debugfs_lookup(buts->name, blk_debugfs_root);
-	if (!dir)
-		bt->dir = dir = debugfs_create_dir(buts->name, blk_debugfs_root);
+//	dir = debugfs_lookup(buts->name, blk_debugfs_root);
+//	if (!dir)
+//		bt->dir = dir = debugfs_create_dir(buts->name, blk_debugfs_root);
 
 	bt->dev = dev;
 	atomic_set(&bt->dropped, 0);
 	INIT_LIST_HEAD(&bt->running_list);
 
 	ret = -EIO;
-	bt->dropped_file = debugfs_create_file("dropped", 0444, dir, bt,
+	bt->dropped_file = debugfs_create_file("dropped", 0444,  q->debugfs_dir, bt,
 					       &blk_dropped_fops);
 
-	bt->msg_file = debugfs_create_file("msg", 0222, dir, bt, &blk_msg_fops);
+	bt->msg_file = debugfs_create_file("msg", 0222, q->debugfs_dir, bt, &blk_msg_fops);
 
-	bt->rchan = relay_open("trace", dir, buts->buf_size,
+	bt->rchan = relay_open("trace", q->debugfs_dir, buts->buf_size,
 				buts->buf_nr, &blk_relay_callbacks, bt);
 	if (!bt->rchan)
 		goto err;
@@ -552,8 +555,8 @@
 
 	ret = 0;
 err:
-	if (dir && !bt->dir)
-		dput(dir);
+//	if (dir && !bt->dir)
+//		dput(dir);
 	if (ret)
 		blk_trace_free(bt);
 	return ret;
